# Generated by Django 3.1.7 on 2021-03-22 13:09

import aldryn_apphooks_config.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import gsoc.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0022_auto_20180620_1551'),
        ('aldryn_newsblog', '0017_auto_20200624_0802'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AddUserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_id', models.CharField(default=gsoc.models.gen_uuid_str, max_length=36)),
            ],
            options={
                'verbose_name': 'Add Users (The invites will be sent to the emails on save)',
                'verbose_name_plural': 'Add Users (The invites will be sent to the emails on save)',
            },
        ),
        migrations.CreateModel(
            name='Builder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('build_pre_blog_reminders', 'build_pre_blog_reminders'), ('build_post_blog_reminders', 'build_post_blog_reminders'), ('build_revoke_student_perms', 'build_revoke_student_perms'), ('build_remove_user_details', 'build_remove_user_details')], max_length=40)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('built', models.BooleanField(default=None, null=True)),
                ('data', models.TextField()),
                ('last_error', models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GsocYear',
            fields=[
                ('gsoc_year', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['-gsoc_year'],
            },
        ),
        migrations.CreateModel(
            name='Scheduler',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('command', models.CharField(choices=[('send_email', 'send_email'), ('send_irc_msg', 'send_irc_msg'), ('revoke_student_permissions', 'revoke_student_permissions'), ('send_reg_reminder', 'send_reg_reminder'), ('add_blog_counter', 'add_blog_counter'), ('update_site_template', 'update_site_template'), ('archive_gsoc_pages', 'archive_gsoc_pages')], max_length=40)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('data', models.TextField()),
                ('success', models.BooleanField(null=True)),
                ('last_error', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubOrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suborg_name', models.CharField(max_length=80)),
            ],
            options={
                'ordering': ['suborg_name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.IntegerField(choices=[(0, 'Others'), (1, 'Suborg Admin'), (2, 'Mentor'), (3, 'Student')], default=0)),
                ('accepted_proposal_pdf', models.FileField(blank=True, null=True, upload_to='proposals/')),
                ('proposal_confirmed', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('reminder_disabled', models.BooleanField(default=False)),
                ('current_blog_count', models.IntegerField(default=0)),
                ('github_handle', models.TextField(blank=True, max_length=100, null=True)),
                ('gsoc_invited', models.BooleanField(default=False)),
                ('app_config', aldryn_apphooks_config.fields.AppHookConfigField(blank=True, help_text='When selecting a value, the form is reloaded to get the updated default', null=True, on_delete=django.db.models.deletion.CASCADE, to='aldryn_newsblog.newsblogconfig', verbose_name='Section')),
                ('gsoc_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.gsocyear')),
                ('suborg_full_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.suborg')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deactivation_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User details',
            },
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_id', models.CharField(blank=True, max_length=255, null=True)),
                ('gsoc_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gsoc.gsocyear')),
            ],
        ),
        migrations.CreateModel(
            name='SubOrgDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_for_participation', models.TextField(blank=True, null=True, verbose_name='Why does your org want to participate in Google Summer of Code?')),
                ('suborg_admin_email', models.EmailField(max_length=254, verbose_name='Suborg admin email')),
                ('suborg_admin_2_email', models.EmailField(blank=True, help_text='Fill this if there are other suborg admins other than you', max_length=254, null=True, verbose_name='Suborg admin 2 email')),
                ('suborg_admin_3_email', models.EmailField(blank=True, help_text='Fill this if there are other suborg admins other than you', max_length=254, null=True, verbose_name='Suborg admin 3 email')),
                ('mentors_student_engagement', models.TextField(blank=True, null=True, verbose_name='How will you keep mentors engaged with their students?')),
                ('students_on_schedule', models.TextField(blank=True, null=True, verbose_name='How will you help your students stay on schedule to complete their projects?')),
                ('students_involvement_gsoc', models.TextField(blank=True, null=True, verbose_name='How will you get your students involved in your community during GSoC?')),
                ('students_involvement_after', models.TextField(blank=True, null=True, verbose_name='How will you keep students involved with your community after GSoC?')),
                ('past_gsoc_experience', models.BooleanField(help_text='Mark the checkbox for yes', verbose_name='Has your org been accepted as a mentor org in Google Summer of Code before?')),
                ('suborg_in_past', models.BooleanField(help_text='Mark the checkbox for yes', verbose_name='Was this as a Suborg?')),
                ('year_of_start', models.IntegerField(verbose_name='What year was your project started?')),
                ('source_code', models.URLField(verbose_name='Where does your source code live?')),
                ('docs', models.URLField(verbose_name='Please provide the URL that points to the repository, GitHub organization, or a web page that describes how to get your source code')),
                ('anything_else', models.TextField(blank=True, null=True, verbose_name='Anything else we should know (optional)')),
                ('suborg_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='If applying for the first time enter the name of your suborg')),
                ('description', models.TextField(verbose_name='A very short description of your organization')),
                ('logo', models.ImageField(help_text='Must be a 24-bit PNG of 256 x 256 pixels.', upload_to='logos/', verbose_name='Your organization logo')),
                ('primary_os_license', models.CharField(max_length=50, verbose_name='Primary Open Source License')),
                ('ideas_list', models.URLField(verbose_name='Ideas List')),
                ('chat', models.CharField(blank=True, max_length=80, null=True)),
                ('mailing_list', models.CharField(blank=True, max_length=80, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('blog_url', models.URLField(blank=True, null=True)),
                ('homepage', models.URLField(blank=True, null=True, verbose_name='Homepage')),
                ('last_message', models.TextField(blank=True, null=True)),
                ('last_reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('changed', models.BooleanField(default=None, null=True)),
                ('applied_but_not_selected', models.ManyToManyField(blank=True, related_name='applied_not_selected', to='gsoc.GsocYear', verbose_name='If your org has applied for GSoC before but not been accepted, select the years')),
                ('gsoc_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suborg_details', to='gsoc.gsocyear')),
                ('last_reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('past_years', models.ManyToManyField(blank=True, to='gsoc.GsocYear', verbose_name='Which years did your org participate in GSoC?')),
                ('suborg', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.suborg', verbose_name='Select your suborg, if you have applied before')),
            ],
            options={
                'verbose_name_plural': 'Suborg Details',
            },
        ),
        migrations.CreateModel(
            name='SendEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to', models.CharField(blank=True, help_text='Separate email with a comma', max_length=255, null=True)),
                ('to_group', models.CharField(blank=True, choices=[('students', 'Students'), ('mentors', 'Mentors'), ('suborg_admins', 'Suborg Admins'), ('admins', 'Admins'), ('all', 'All')], max_length=80, null=True)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('scheduler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.scheduler')),
            ],
        ),
        migrations.CreateModel(
            name='RegLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_used', models.BooleanField(default=False, editable=False)),
                ('reglink_id', models.CharField(default=gsoc.models.gen_uuid_str, editable=False, max_length=36)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_role', models.IntegerField(choices=[(0, 'Others'), (1, 'Suborg Admin'), (2, 'Mentor'), (3, 'Student')], default=0, null=True)),
                ('email', models.CharField(default='', max_length=300, validators=[django.core.validators.EmailValidator()])),
                ('send_notifications', models.BooleanField(default=True)),
                ('adduserlog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reglinks', to='gsoc.adduserlog')),
                ('gsoc_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.gsocyear')),
                ('reminder', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reglinks', to='gsoc.scheduler')),
                ('scheduler', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.scheduler')),
                ('user_suborg', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.suborg')),
            ],
        ),
        migrations.CreateModel(
            name='ReaddUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PageNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='cms.page')),
                ('published_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_for_published', to='cms.page')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GsocEndDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('timeline', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gsoc.timeline')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('event_id', models.CharField(blank=True, max_length=255, null=True)),
                ('timeline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.timeline')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('content', models.CharField(max_length=1100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aldryn_newsblog.article')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='gsoc.comment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BlogPostHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aldryn_newsblog.article')),
            ],
        ),
        migrations.CreateModel(
            name='BlogPostDueDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Weekly Blog Post Due', max_length=100)),
                ('date', models.DateField()),
                ('event_id', models.CharField(blank=True, max_length=255, null=True)),
                ('category', models.IntegerField(blank=True, choices=[(0, 'Weekly Check-In'), (1, 'Blog Post')], null=True)),
                ('add_counter_scheduler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.scheduler')),
                ('post_blog_reminder_builder', models.ManyToManyField(blank=True, to='gsoc.Builder')),
                ('pre_blog_reminder_builder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pre', to='gsoc.builder')),
                ('timeline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gsoc.timeline')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='ArticleReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_reviewed', models.BooleanField(default=False)),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aldryn_newsblog.article')),
                ('last_reviewed_by', models.ForeignKey(blank=True, limit_choices_to={'is_superuser': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(fields=('suborg_full_name', 'user', 'gsoc_year'), name='unique_draft_user'),
        ),
    ]
